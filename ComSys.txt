//To compile (linux/mac): gcc cbmp.c main.c -o main.out -std=c99
//To run (linux/mac): ./main.out example.bmp example_inv.bmp

//To compile (win): gcc cbmp.c main.c -o main.exe -std=c99
//To run (win): main.exe example.bmp example_inv.bmp

#include <stdlib.h>
#include <stdio.h>
#include "cbmp.h"
#include <time.h>

clock_t start, end;
double cpu_time_used;


// WHERE EVERYTHING WORKS

//Function to convert an input image to gray image
void convert_to_gray(unsigned char input_image[BMP_WIDTH][BMP_HEIGTH][BMP_CHANNELS], unsigned char gray_scale[BMP_WIDTH][BMP_HEIGTH], int threshold){
  for (int x = 0; x < BMP_WIDTH; x++)
  {
    for (int y = 0; y < BMP_HEIGTH; y++)
    {
      gray_scale[x][y] = (input_image[x][y][0]+input_image[x][y][1]+input_image[x][y][2])/3;
      
      if (gray_scale[x][y] < threshold) {
        gray_scale[x][y] = 0;
      } else {
        gray_scale[x][y] = 255;
      }
   //   printf("%d ",gray_scale[x][y]);
    }
  }
}

//Function to convert a gray image back to rgb image
void convert_to_rgb(unsigned char gray_scale[BMP_WIDTH][BMP_HEIGTH], unsigned char output_image[BMP_WIDTH][BMP_HEIGTH][BMP_CHANNELS]){
  for (int x = 0; x < BMP_WIDTH; x++)
  {
    for (int y = 0; y < BMP_HEIGTH; y++)
    {
      for (int c = 0; c < BMP_HEIGTH; c++) {
        output_image[x][y][c] = gray_scale[x][y];
      }     
    }
  }
}

// Function to set edge pixel to black
void edge_pixel2_black(unsigned char input_img[BMP_WIDTH][BMP_HEIGTH]) {
  for (int x = 0; x < BMP_WIDTH; x++)
  {
    for (int y = 0; y < BMP_HEIGTH; y++)
    {
      if (x==0 || y==0 || x==BMP_WIDTH-1 || y==BMP_HEIGTH-1) {
        input_img[x][y]=0;  
    }
  }
  }
}

// Function to copy a 2d array
void copy_array(unsigned char original_img[BMP_WIDTH][BMP_HEIGTH],unsigned char copied_img[BMP_WIDTH][BMP_HEIGTH]) {
  for (int x = 0; x < BMP_WIDTH; x++)
  {
    for (int y = 0; y < BMP_HEIGTH; y++)
    {
      copied_img[x][y]=original_img[x][y];
    }
  }
}

// Function that erodes the gray scale image
int erossion(unsigned char gray_scale[BMP_WIDTH][BMP_HEIGTH], unsigned char erossion_image[BMP_WIDTH][BMP_HEIGTH]){
 // copy array with the use of function. erossion_image is the copied image
 edge_pixel2_black(gray_scale);
 copy_array(gray_scale,erossion_image);
 int count = 0;

  // erode 
  for (int x = 1; x < BMP_WIDTH-1; x++)
  {
    for (int y = 1; y < BMP_HEIGTH-1; y++)
    {
      if (gray_scale[x][y]==255) {
        if (gray_scale[x][y+1]==0 || gray_scale[x][y-1]==0 || gray_scale[x-1][y]==0 || gray_scale[x+1][y]==0) {
          erossion_image[x][y]=0;
          count++;
        } 
      }
      }     
    }
    return count;
  }


// Global count variable
int count_cell = 0;

// Function to detect cells
void detect_cell(unsigned char detect_img[BMP_WIDTH][BMP_HEIGTH],unsigned char updated_img[BMP_WIDTH][BMP_HEIGTH],unsigned char input_image[BMP_WIDTH][BMP_HEIGTH][BMP_CHANNELS]) {  
  // copy_array(detect_img,updated_img);
  int breaking = 0;
  for (int x = 0; x < BMP_WIDTH-14; x++)
  {
    breaking = 0;
    for (int y = 0; y < BMP_HEIGTH-14; y++)
    {
      breaking = 0;
      for (int s = x; s < x+14; s++){
        if(breaking == 1)
        {
          break;
        }
            for (int z = y; z < y+14; z++){
              if(detect_img[s][z] == 255 && (z == y || z == y+13 || s == x || s == x+13)){
              breaking = 1;
              break;
              }
            }
          }
      for (int i = x+1; i < x+13; i++)
      {
        if(breaking == 1)
        {
          break;
        }
        for (int j = y+1; j < y+13; j++)
        {
          if (detect_img[i][j] == 255) 
          {
            count_cell++;
            for (int l = -6; l < 7; l++) {
              for (int h = -1; h < 2; h++) {
             //int h=0;
                input_image[7+x+l][7+y+h][1] = 255;
                input_image[7+x+h][7+y+l][1] = 255;

                input_image[7+x+l][7+y+h][0] = 0;
                input_image[7+x+h][7+y+l][0] = 0;

                input_image[7+x+l][7+y+h][2] = 0;
                input_image[7+x+h][7+y+l][2] = 0;
              }
              
            }

            for (int k = x+1; k < x+13; k++)
            {
              for (int h = y+1; h < y+13; h++)
              {

                detect_img[k][h] = 0;
              }
            }
          } 
        }
      }
    }
  }
  copy_array(detect_img,updated_img);
  
}


  //Declaring the array to store the image (unsigned char = unsigned 8 bit)
  unsigned char input_image[BMP_WIDTH][BMP_HEIGTH][BMP_CHANNELS];
  unsigned char output_image[BMP_WIDTH][BMP_HEIGTH][BMP_CHANNELS];
  unsigned char gray_scale[BMP_WIDTH][BMP_HEIGTH];
  unsigned char erossion_image[BMP_WIDTH][BMP_HEIGTH];
  unsigned char detected_image[BMP_WIDTH][BMP_HEIGTH];
  unsigned char mask_image[BMP_WIDTH][BMP_HEIGTH][BMP_CHANNELS];
  int threshold = 90;


  
//Main function
int main(int argc, char** argv)
{
  // Start a timer to measure how long the code takes to run
  start = clock();
  //argc counts how may arguments are passed
  //argv[0] is a string with the name of the program
  //argv[1] is the first command line argument (input image)
  //argv[2] is the second command line argument (output image)

  //Checking that 2 arguments are passed
  if (argc != 4)
  {
      fprintf(stderr, "Usage: %s <output file path> <output file path>\n", argv[0]);
      exit(1);
  }

  printf("Cell program - 02132 - A1\n");

  //Load image from file
  read_bitmap(argv[1], input_image);

  //Run inversion
  convert_to_gray(input_image,gray_scale,threshold);

  // Detect cells
  detect_cell(gray_scale,detected_image,input_image);
  
  int rounds = 0;
  while(erossion(detected_image,erossion_image)!=0) {
    rounds++;
    detect_cell(erossion_image,detected_image,input_image);
  }

  // Run gray to RGB
  convert_to_rgb(erossion_image,output_image);

  // Print number of rounds
  printf("Number of rounds: \n");
  printf("%d \n", rounds);

  // Print number of cells
  printf("Number of cells: \n");
  printf("%d ",count_cell);

  //Save image to file
  write_bitmap(output_image, argv[2]);

  write_bitmap(input_image, argv[3]);

  printf("Done!\n");

  // Check how long time the code takes to execute
  end = clock();
  cpu_time_used = end - start;
  printf("Total time: %f ms\n", cpu_time_used * 1000.0 /
  CLOCKS_PER_SEC);
  return 0; 
}

